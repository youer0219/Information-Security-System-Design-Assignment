/************************************************************************
file name:    sm2_sv.h
version:      sm2_sv_v1.0
date:         sep 27,2016
description:  implementation of sm2 signature algorithm and verification algorithm function list:

1.sm2_init	//initiate sm2 curve
2.test_point	//test if the given point is on sm2 curve
3.test_pubkey	//test if the given public key is valid
4.test_zero	//test if the big x equals zero
5.test_n	//test if the big x equals n
6.test_range	//test if the big x belong to the range[1,n-1]
7.sm2_keygeneration	//generate public key
8.sm2_sign	//sm2 signature algorithm
9.sm2_verify	//sm2 verification
10.sm2_selfcheck()	//sm2 slef-check
11.sm3_256()	//this function can be found in sm3.c and sm3.h

notes:
this sm2 implementation source code can be used for academic, non-profit making or non-commercial use only.
this sm2 implementation is created on miracl. sm2 implementation source code provider does not provide miracl library, miracl license or any permission to use miracl library. any commercial use of miracl requires a license which may be obtained from shamus software ltd.
**************************************************************************/


#include<string.h>  
#include<malloc.h>  
#include "miracl/miracl.h"



#define SM2_WORDSIZE   8
#define SM2_NUMBITS    256
#define  SM2_NUMWORD  (SM2_NUMBITS /SM2_WORDSIZE)  //32

#define ERR_ECURVE_INIT                0x00000001
#define ERR_INFINITY_POINT             0x00000002
#define ERR_NOT_VALID_POINT            0x00000003
#define ERR_ORDER                      0x00000004
#define ERR_NOT_VALID_ELEMENT          0x00000005
#define ERR_GENERATE_R                 0x00000006
#define ERR_GENERATE_S                 0x00000007


#define	ERR_OUTRANGE_R 	    0x00000008
#define	ERR_OUTRANGE_S	    0x00000009
#define	ERR_GENERATE_T 	    0x0000000a
#define	ERR_PUBKEY_INIT 	0x0000000b
#define	ERR_DATA_MEMCMP 	0x0000000c


unsigned char sm2_p[32] =
{ 0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00, 0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff };

unsigned char sm2_a[32] =
{ 0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00, 0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xfc };

unsigned char sm2_b[32] = { 0x28,0xe9,0xfa,0x9e, 0x9d,0x9f,0x5e,0x34, 0x4d,0x5a,0x9e,0x4b,0xcf,0x65,0x09,0xa7,
0xf3,0x97,0x89,0xf5, 0x15,0xab,0x8f,0x92, 0xdd,0xbc,0xbd,0x41,0x4d,0x94,0x0e,0x93 };

unsigned char sm2_gx[32] = { 0x32,0xc4,0xae,0x2c,0x1f,0x19,0x81,0x19,0x5f,0x99,0x04,0x46,0x6a,0x39,0xc9,0x94,
0x8f,0xe3,0x0b,0xbf,0xf2,0x66,0x0b,0xe1,0x71,0x5a,0x45,0x89,0x33,0x4c,0x74,0xc7 };

unsigned char
sm2_gy[32] = { 0xbc,0x37,0x36,0xa2,0xf4,0xf6,0x77,0x9c,0x59,0xbd,0xce,0xe3,0x6b,0x69,0x21,0x53, 0xd0,
0xa9,0x87,0x7c,0xc6,0x2a,0x47,0x40,0x02,0xdf,0x32,0xe5,0x21,0x39,0xf0,0xa0 };

unsigned char sm2_n[32] =
{ 0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0x72,0x03,0xdf,0x6b,0x21,0xc6,0x05,0x2b,0x53,0xbb,0xf4,0x09,0x39,0xd5,0x41,0x23 };

big Gx, Gy, p, a, b, n;

epoint* G, * nG;


int sm2_init();
int test_point(epoint* point);
int test_pubkey(epoint* pubkey);
int test_zero(big x); int test_n(big x);
int test_range(big x);
int sm2_keygeneration(unsigned char prikey[], unsigned char px[], unsigned char py[]);
int sm2_sign(unsigned char* message, int len, unsigned char za[], unsigned char rand[], unsigned char d[], unsigned char r[], unsigned char s[]);
int sm2_verify(unsigned char* message, int len, unsigned char za[], unsigned char px[], unsigned char py[], unsigned char r[], unsigned char s[]);
int sm2_selfcheck();
